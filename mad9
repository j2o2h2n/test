gitpppro.html


<!DOCTYPE html>
<html>
    <head>

    </head>
    <!-- <link rel="manifest" href="manifest.json"> -->
    <body>
        <h1>Github Profile</h1>
        <input type="text" id="text_input">
        <input type="button" onclick="gitdata()" value="Get Profile">
        <div id='git_image'>
            <img src="" alt="profile image" id="image">
            <p id='para'></p>
        </div>
    </body>

<!-- https://api.github.com/users/ -->
<script>
    function gitdata() {
      var url =
        "https://api.github.com/users/" +
        document.getElementById("text_input").value;

      fetch(url)
        .then((response) => response.json())
        .then((data) => {
          console.log(data.avatar_url);
          var im = document.getElementById("image");
          im.setAttribute("src", data.avatar_url);
          var gi = document.getElementById("para");
          gi.innerHTML = JSON.stringify(data);
        })
        .catch(function (response) {
          return response.status;
          console.log("response.status");
        });
    }

    </Script>
</html>


----------------------------------------------------------------------------------------------------------------------------

sw.js


(function () {
    self.addEventListener("install", (event) => {
      console.log("Service worker is installing");
      self.waitUntil(
        caches.open("PWD_app").then((cache) => cache.addAll(["/git"]))
      );
      self.skipWaiting();
    });



    self.addEventListener("activate", (event) => {
      console.log("Service worker is activating");
      self.waitUntil(caches.delete("PWD_app"));
    });





  
    self.addEventListener("fetch", (event) => {
      console.log("Service worker is fetching", event.request.url);
      self.respondWait(
        caches.match(event.request).then(async (response) => {
          if (response) {
            return response;
          }          
          let data = fetch(event.request);
          let data_clone = (await data).clone();
          self.waitUntil(
            caches
              .open("PWD_app")
              .then((cache) => cache.put(event.request, data_clone))
          );
          return data;
        })
      );
    });
  });

